#+LATEX_HEADER: \usepackage[margin=1.5cm,includefoot]{geometry}
#+LATEX_HEADER: \usepackage[none]{hyphenat}
#+LATEX_HEADER: \usepackage{array}
#+LATEX_HEADER: \newcolumntype{$}{>{\global\let\currentrowstyle\relax}}
#+LATEX_HEADER: \newcolumntype{^}{>{\currentrowstyle}}
#+LATEX_HEADER: \newcommand{\rowstyle}[1]{\gdef\currentrowstyle{#1} #1\ignorespaces}

#+OPTIONS: toc:nil title:nil

\begin{titlepage}
  \begin{center}
    \line(1,0){300} \\
    [5mm]
    \huge{\bfseries Numerical Methods Coursework} \\
    [5mm]
    \huge{Gleb Dianov} \\
  \end{center}
\end{titlepage}

\newpage

\tableofcontents

\newpage

* Problem specification

  $$ f(x) = \frac{sin(x)}{ln(x)} + 1 $$

  $$ \int_{4}^{8} f(x) dx = \int_{4}^{8} (\frac{sin(x)}{ln(x)} + 1) dx $$

  This integral cannot be solved analytically.

  #+CAPTION: Graph of $f(x)$.
  [[./function_graph.png]]

* Strategy
  On interval $[4,8]$ it is continuous and positive, so we can use the Simpson's rule to estimate the integral. It can be derived from the midpoint and the trapezium rules. Estimating definite integrals is estimating areas. Trapezium rule estimates the area by splitting it into trapezoids and calculating their areas. The midpoint rule does almost the same thing, but instead of calculating the average of lengths of bases to find the area it uses the integrand value at the middle point of a range.

  $$ M_n = h * \sum_{i=1}^{n-1} f (a + (i + 0.5) h) $$

  $$ T_n = \frac{h}{2} * (f(a) + 2 \sum_{i=1}^{n-1} f(a + i*h) + f(b)) $$

  If we take the weighted average of these then the leading error term vanishes.

  $$ S_n = \frac{2M_n+T_n}{3} $$

* Formula application
  #+ATTR_LATEX: :mode math :environment bmatrix
  |----+-------------------+-------------------+-------------------+--------------------+-------------------------------------|
  |  n |               T_n |               M_n |               S_n |      S_n - S_{n/2} | \frac{S_n - S_{n/2}}{S_{n/2} - S_{n/4}} |
  |----+-------------------+-------------------+-------------------+--------------------+-------------------------------------|
  |  2 | 3.617973624362951 | 3.483622345190564 | 3.528406104914693 |                    |                                     |
  |----+-------------------+-------------------+-------------------+--------------------+-------------------------------------|
  |  4 | 3.550797984776757 | 3.516669866703652 | 3.528045906061354 | -0.000360198853339 |                                     |
  |----+-------------------+-------------------+-------------------+--------------------+-------------------------------------|
  |  8 | 3.533733925740205 | 3.525167844161146 | 3.528023204687499 | -0.000022701373855 |                   0.063024558920655 |
  |----+-------------------+-------------------+-------------------+--------------------+-------------------------------------|
  | 16 | 3.529450884950675 | 3.527307202384797 | 3.528021763240090 | -0.000001441447409 |                   0.063496042914706 |
  |----+-------------------+-------------------+-------------------+--------------------+-------------------------------------|
  | 32 | 3.528379043667736 | 3.527842987194325 | 3.528021672685462 | -0.000000090554628 |                   0.062822013278819 |
  |----+-------------------+-------------------+-------------------+--------------------+-------------------------------------|
  | 64 | 3.528111015431030 | 3.527976992811555 | 3.528021667018047 | -0.000000005667415 |                   0.062585591613435 |
  |----+-------------------+-------------------+-------------------+--------------------+-------------------------------------|

* Error analysis

  $$ \frac{S_{4n} - S_{2n}}{S_{2n} - S_n} \approx \frac{1}{16} $$
  $$ S_{4n} \approx S_n + \frac{S_{2n} - S_n}{16} $$
  $$ \implies S_{8n} \approx S_{2n} + \frac{S_{4n} - S_{2n}}{16} \approx S_{2n} + \frac{S_{2n} - S_n}{16} + \frac{S_{2n} + \frac{S_{2n} - S_n}{16} - S_{2n}}{16} \approx S_{2n} + \frac{S_{2n} - S_n}{16} + \frac{S_{2n} - S_n}{16^2} $$
  $$ S_{16n} \approx S_{2n} + \frac{S_{2n} - S_n}{16} + \frac{S_{2n} - S_n}{16^2} + \frac{S_{2n} - S_n}{16^3} $$
  $$ S_{\infty} \approx S_{2n} + (S_{2n} - S_n) \sum_{k=1}^{\infty} 16^{-k} = S_{2n} + (S_{2n} - S_n) \frac{\frac{1}{16}}{1-\frac{1}{16}} = S_{2n} + \frac{S_{2n} - S_n}{15}$$

  #+ATTR_LATEX: :mode math :environment bmatrix
  |----+-------------------+-------------------|
  |  n |               S_n |        S_{\infty} |
  |----+-------------------+-------------------|
  |  2 | 3.528406104914693 |                   |
  |----+-------------------+-------------------|
  |  4 | 3.528045906061354 | 3.528382091657804 |
  |----+-------------------+-------------------|
  |  8 | 3.528023204687499 | 3.528044392636430 |
  |----+-------------------+-------------------|
  | 16 | 3.528021763240090 | 3.528023108591005 |
  |----+-------------------+-------------------|
  | 32 | 3.528021672685462 | 3.528021757203115 |
  |----+-------------------+-------------------|
  | 64 | 3.528021667018047 | 3.528021672307634 |
  |----+-------------------+-------------------|

* Interpretation

  $$ \int_{4}^{8} (\frac{sin(x)}{ln(x)} + 1) dx \approx 3.528022 $$

  We can see that Simpson's rule estimates round to $3.528022$ for $n = 16, 32, 64$. Also the extrapolations to infinity for these values of $n$ round to it. Therefore, we can say with a high level of confidence that it is the integral to 6 decimal places.

\newpage
* Use of technology

  #+BEGIN_SRC haskell
  import qualified Data.ByteString.Lazy as BL (writeFile)
  import           Data.Csv             (encode)
  import           Numeric              (showFFloat)

  trp :: (Fractional a) => (a -> a) -> Integer -> (a, a) -> a
  trp f n (a, b) =
    (h / 2) * (f a + 2 * foldl (\p i -> p + f (a + h * fromIntegral i)) 0 [1..n-1] + f b)
    where h = (b - a) / fromInteger n

  mid :: (Fractional a) => (a -> a) -> Integer -> (a, a) -> a
  mid f n (a, b) = h * foldl (\p i -> p + f (a + h * (fromIntegral i + 0.5))) 0 [0..n-1]
    where h = (b - a) / fromInteger n

  simp :: (Fractional a) => (a -> a) -> Integer -> (a, a) -> a
  simp f n range = (2 * mid f n range + trp f n range) / 3

  diffs :: Fractional b => [(a, b)] -> [(a, b, b, b)]
  diffs = diffs3 . diffs2
    where diffs2 []                 = []
          diffs2 [(a, b)]           = [(a, b, 0)]
          diffs2 ((a, b):(c, d):xs) =
            (a, b, 0) : (\((x, y, _):ds) -> (x, y, d-b) : ds) (diffs2 $ (c, d) : xs)

          diffs3 []                       = []
          diffs3 [(a, b, c)]              = [(a, b, c, 0)]
          diffs3 ((a, b, c):(d, e, f):xs) =
            (a, b, c, 0) : (\((x, y, z, _):ds) -> (x, y, z, f/c) : ds) (diffs3 $ (d, e, f) : xs)

  inf :: Fractional b => [(a, b, c, d)] -> [(a, b, c, d, b)]
  inf []                             = []
  inf [(a, b, c, d)]                 = [(a, b, c, d, 0)]
  inf ((a, b, c, d):(e, f, g, h):xs) =
    (a, b, c, d, 0) : (\((v,x,y,z,_):ds) -> (v,x,y,z,infExtr f b) : ds) (inf $ (e, f, g, h) : xs)
    where infExtr x y = y - (y - x) / 15

  showD :: Double -> String
  showD x = showFFloat (Just 15) x ""

  func :: Double -> Double
  func x = sin x / log x + 1

  main :: IO ()
  main =  BL.writeFile file $ encode
       $  show7 . (\(a, b, c, d, e) -> (a, trp func a (4, 8), mid func a (4, 8), b, c, d, e))
      <$> inf (diffs $ (\i -> (i, simp func i (4,8))) . (2^) <$> [1..6])
    where show7 (a, b, c, d, e, f, g) = (a, showD b, showD c, showD d, showD e, showD f, showD g)
          file = "results.csv"
  #+END_SRC

  Function ~trp~ takes a function that we want to integrate, ~n~, and an interval. It returns an estimate of the integral calculated using the trapezium rule:

  $$ T_n = \frac{h}{2} * (f(a) + 2 \sum_{i=1}^{n-1} f(a + i*h) + f(b)) $$

  Function ~mid~ takes a function that we want to integrate, ~n~, and an interval. It returns an estimate of the integral calculated using the midpoint rule:

  $$ M_n = h * \sum_{i=1}^{n-1} f (a + (i + 0.5) h) $$

  Function ~simp~ takes a function that we want to integrate, ~n~, and an interval. It returns an estimate of the integral calculated using the Simpson's rule:

  $$ S_n = \frac{2 M_n + T_n}{3} $$

  Function ~diffs~ takes a list of pairs and returns a list of tupples with differences and ratios of differences.

  Function ~extrapolate~ calculates extrapolations to infinity of the Simpson's method.

  Function ~showD~ takes a double and prints it to 15 decimal points.

  The main function calculates $S_2$, $S_4$, $S_8$, $S_16$, $S_32$, $S_64$; finds the differences and the ratios of the differences; approximates $S_{\infty}$; calculates values of $T_n$ and $M_n$; and writes all the results into a csv file called "results.csv".

