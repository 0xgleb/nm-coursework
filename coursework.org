#+LATEX_HEADER: \usepackage[margin=1.5cm,includefoot]{geometry}
#+LATEX_HEADER: \usepackage[none]{hyphenat}
#+LATEX_HEADER: \usepackage{array}
#+LATEX_HEADER: \newcolumntype{$}{>{\global\let\currentrowstyle\relax}}
#+LATEX_HEADER: \newcolumntype{^}{>{\currentrowstyle}}
#+LATEX_HEADER: \newcommand{\rowstyle}[1]{\gdef\currentrowstyle{#1} #1\ignorespaces}
#+LATEX_HEADER: \usepackage{indentfirst}

#+OPTIONS: toc:nil title:nil

\begin{titlepage}
  \begin{center}
    \line(1,0){300} \\
    [5mm]
    \huge{\bfseries Numerical Methods Coursework} \\
    [5mm]
    \huge{Gleb Dianov} \\
  \end{center}
\end{titlepage}

\newpage

\tableofcontents

\newpage

* Problem specification
$$ f(x) = \frac{sin(x)}{ln(x)} + 1 $$

$$ \int_{4}^{8} f(x) dx = \int_{4}^{8} (\frac{sin(x)}{ln(x)} + 1) dx $$

This integral cannot be solved analytically.

#+CAPTION: Graph of $f(x)$.
[[./function_graph.png]]

* Strategy

On interval $[4,8]$ it is continuous and positive, so we can use the Simpson's rule to estimate the integral. It can be derived from the midpoint and the trapezium rules. Estimating definite integrals is estimating areas. Trapezium rule estimates the area by splitting it into trapezoids and calculating their areas. The midpoint rule does almost the same thing, but instead of calculating the average of lengths of bases to find the area it uses the integrand value at the middle point of a range.

We know that definite integrals calculate the area under the curve. We can estimate that area using different methods.

** Trapezium rule

Trapezium rule splits the curve into trapeziums the areas of which we can easily calculate.
We have $n$ trapeziums with total area $A$. The area of the trapezium $i$ is $A_i$.

$$ A_i = \frac{f(x_{i+1}) + f(x_i)}{2}(x_{i+1} - x_i) $$

$$ \forall i: x_{i+1} - x_i = h = \frac{x_n - x_0}{n} $$

$$ \implies A_i = h\frac{f(x_i + h) + f(x_i)}{2} $$

$$ \implies \int_{x_0}^{x_n} f(x) dx \approx \sum_{i=0}^{n-1} A_i = \sum_{i=0}^{n-1} h\frac{f(x_i + h) + f(x_i)}{2} $$

$$ \implies \int_{x_0}^{x_n} f(x) dx \approx \sum_{i=0}^{n-1} A_i = \frac{h}{2} \sum_{i=0}^{n-1} (f(x_i) + f(x_i + h)) $$

$$ \implies \int_{x_0}^{x_n} f(x) dx \approx \frac{h}{2} * (f(x_0) + 2 \sum_{i=1}^{n-1} f(x_0 + i*h) + f(x_n)) $$

$$ T_n = \frac{h}{2} * (f(x_0) + 2 \sum_{i=1}^{n-1} f(x_0 + i*h) + f(x_n)) $$

[[./trapezium.png]]

** Midpoint rule

Midpoint rule estimates the area using rectangles. A rectangle has a side $(b, a)$ of width $b-a$ and the height of the rectangle is $f(\frac{a+b}{2})$.

$$ A_i = (x_{i+1} - x_i) * f(\frac{x_{i+1} + x_i}{2}) $$

$$ \forall i: x_{i+1} - x_i = h = \frac{x_n - x_0}{n} $$

$$ \implies A_i = h * f(\frac{2x_i + h}{2}) $$

$$ \implies A_i = h * f(x_i + \frac{h}{2}) $$

$$ \forall i: x_i = x_0 + i * h$$

$$ \implies A_i = h * f(x_0 + i * h + \frac{h}{2}) $$

$$ \implies A_i = h * f(x_0 + (i + \frac{1}{2})h) $$

$$ \implies \int_{x_0}^{x_n} f(x) dx \approx \sum_{i=0}^{n-1} A_i = \sum_{i=0}^{n-1} h * f(x_) + (i + \frac{1}{2})h))$$

$$ \implies \int_{x_0}^{x_n} f(x) dx \approx h * \sum_{i=0}^{n-1} f(x_0 + (i + 0.5) h) $$

$$ M_n = h * \sum_{i=0}^{n-1} f(x_0 + (i + 0.5) h) $$

[[./midpoint.png]]

** Simpson's rule

Both the midpoint rule and the trapezium rule have the second order of convergence. If we take the right weighted average of them then the leading error term vanishes, thus giving us a better approximation.

$$ S_n = \frac{2M_n+T_n}{3} $$

* Formula application
#+ATTR_LATEX: :mode math :environment bmatrix
|----+-------------------+-------------------+-------------------+--------------------+-----------------------------------------|
|  n |               T_n |               M_n |               S_n |      S_n - S_{n/2} | \frac{S_n - S_{n/2}}{S_{n/2} - S_{n/4}} |
|----+-------------------+-------------------+-------------------+--------------------+-----------------------------------------|
|  2 | 3.617973624362951 | 3.483622345190564 | 3.528406104914693 |                    |                                         |
|----+-------------------+-------------------+-------------------+--------------------+-----------------------------------------|
|  4 | 3.550797984776757 | 3.516669866703652 | 3.528045906061354 | -0.000360198853339 |                                         |
|----+-------------------+-------------------+-------------------+--------------------+-----------------------------------------|
|  8 | 3.533733925740205 | 3.525167844161146 | 3.528023204687499 | -0.000022701373855 |                       0.063024558920655 |
|----+-------------------+-------------------+-------------------+--------------------+-----------------------------------------|
| 16 | 3.529450884950675 | 3.527307202384797 | 3.528021763240090 | -0.000001441447409 |                       0.063496042914706 |
|----+-------------------+-------------------+-------------------+--------------------+-----------------------------------------|
| 32 | 3.528379043667736 | 3.527842987194325 | 3.528021672685462 | -0.000000090554628 |                       0.062822013278819 |
|----+-------------------+-------------------+-------------------+--------------------+-----------------------------------------|
| 64 | 3.528111015431030 | 3.527976992811555 | 3.528021667018047 | -0.000000005667415 |                       0.062585591613435 |
|----+-------------------+-------------------+-------------------+--------------------+-----------------------------------------|

* Error analysis

$$ \frac{S_{4n} - S_{2n}}{S_{2n} - S_n} \approx \frac{1}{16} $$
$$ S_{4n} \approx S_{2n} + \frac{S_{2n} - S_n}{16} $$
$$ \implies S_{8n} \approx S_{4n} + \frac{S_{4n} - S_{2n}}{16} \approx S_{2n} + \frac{S_{2n} - S_n}{16} + \frac{S_{2n} + \frac{S_{2n} - S_n}{16} - S_{2n}}{16} \approx S_{2n} + \frac{S_{2n} - S_n}{16} + \frac{S_{2n} - S_n}{16^2} $$
$$ S_{16n} \approx S_{2n} + \frac{S_{2n} - S_n}{16} + \frac{S_{2n} - S_n}{16^2} + \frac{S_{2n} - S_n}{16^3} $$
$$ S_{\infty} \approx S_{2n} + (S_{2n} - S_n) \sum_{k=1}^{\infty} 16^{-k} = S_{2n} + (S_{2n} - S_n) \frac{\frac{1}{16}}{1-\frac{1}{16}} = S_{2n} + \frac{S_{2n} - S_n}{15}$$

#+ATTR_LATEX: :mode math :environment bmatrix
|----+-------------------+-------------------|
|  n |               S_n |        S_{\infty} |
|----+-------------------+-------------------|
|  2 | 3.617973624362951 |                   |
|----+-------------------+-------------------|
|  4 | 3.550797984776757 | 3.528021892804465 |
|----+-------------------+-------------------|
|  8 | 3.533733925740205 | 3.528021691262575 |
|----+-------------------+-------------------|
| 16 | 3.529450884950675 | 3.528021667143596 |
|----+-------------------+-------------------|
| 32 | 3.528379043667736 | 3.528021666648486 |
|----+-------------------+-------------------|
| 64 | 3.528111015431030 | 3.528021666640219 |
|----+-------------------+-------------------|

All of the extrapolations to infinity of Simpson's rule listed above round to $3.528022$, so we can suggest with a high level of confidence that it is the integral to 6 decimal points.

* Interpretation

$$ \int_{4}^{8} (\frac{sin(x)}{ln(x)} + 1) dx \approx 3.528022 $$

** Limitations

These methods can give very good numerical approximations of the integral, but they cannot give you the exact value of the integral.

\newpage
* Use of technology

#+BEGIN_SRC haskell
import qualified Data.ByteString.Lazy as BL (writeFile)
import           Data.Csv
import           Numeric              (showFFloat)

{-| A new data type for saving estimates -}
data Estimate = Estimate { n             :: Integer      -- ^ n
                         , trapezium     :: Double       -- ^ estimate by the trapezium rule
                         , midpoint      :: Double       -- ^ estimate by the midpoint rule
                         , simpsons      :: Double       -- ^ estimate by Simpson's rule
                         , difference    :: Maybe Double -- ^ S_n - S_{n/2}
                         , ratio         :: Maybe Double -- ^ (S_n - S_{n/2}) / (S_{n/2} - S_{n/4})
                         , extrapolation :: Maybe Double -- ^ S_n + (S_n - S_{n/2})/15
                         } deriving Show

{-| This function takes a function that we want to integrate, how many strips we want to use
and a range. It calculates three estimates using the trapezium, midpoint and Simpson's rules.
It returns the estimates using the Estimate data type.
-}
estimate :: (Double -> Double) -> Integer -> (Double, Double) -> Estimate
estimate f m (a, b) = Estimate m trp mid simp Nothing Nothing Nothing
  where h = (b - a) / fromInteger m -- length of a strip
        trp = (h / 2) * (f a + 2 * foldl (\p i -> p + f (a + h * fromIntegral i)) 0 [1..m-1] + f b)
        -- the trapezium rule
        mid = h * foldl (\p i -> p + f (a + h * (fromIntegral i + 0.5))) 0 [0..m-1]
        -- the midpoint rule
        simp = (2 * mid + trp) / 3
        -- Simpson's rule

{-| This function takes a function f that with two arguments and a list [x_1, x_2, ..., x_n].
It returns the list [f(x_2, x_1), f(x_3, x_2), ..., f(x_n, x_{n-1})].
-}
applyToNext :: (a -> a -> b) -> [a] -> [b]
applyToNext o l = zipWith o (tail l) (init l)

{-| This function takes a function that extracts a value from an estimate g, a function f with two
arguments, a function that updates an estimate s, a list [e_1, ..., e_n] and returns
[e_1, s(e_2, f(g(e_2), (e_1))), s(e_3, f(g(e_3), (e_2))), ..., s(e_n, f(g(e_n), (e_{n-1})))]
-}
applyToNextRes :: (e -> a) -> (a -> a -> b) -> (e -> b -> e) -> [e] -> [e]
applyToNextRes _      _ _      []       = []
applyToNextRes getter f setter es@(e:_) =
    e : applyToNext (\res2 res1 -> setter res2 $ f (getter res2) (getter res1)) es

{-| This function takes a list of estimates and returns the same estimates, but
with the difference field updated for each estimate (except the first one)
-}
diffs :: [Estimate] -> [Estimate]
diffs = applyToNextRes simpsons (-) (\est d -> est { difference = Just d })

{-| This function takes a list of estimates and returns the same estimates, but
with the ratio field updated for each estimate (except for the first two)
-}
ratios :: [Estimate] -> [Estimate]
ratios = applyToNextRes difference (\d2 d1 -> (/) <$> d2 <*> d1) (\est r -> est { ratio = r })

{-| This function takes a list of estimates and returns the same estimates, but
with the extrapolation field updated for each estimate (except for the first one)
-}
inf :: [Estimate] -> [Estimate]
inf = applyToNextRes simpsons (\s2n sn -> s2n + (s2n - sn) / 15) setter
      where setter est extr = est { extrapolation = Just extr } -- updates the extrapolation field

{-| This function takes a number and converts it to a string with the number up to 15 d.p. -}
showD :: Double -> String
showD x = showFFloat (Just 15) x ""

{-| This is the function that we want to integrate -}
func :: Double -> Double
func x = sin x / log x + 1

{-| Estimate is made an instance of the ToRecord type class
so that we can write estimates to a csv file
-}
instance ToRecord Estimate where
    toRecord (Estimate i t m s d r e) =
      record [ toField i
             , toField $ showD t
             , toField $ showD m
             , toField $ showD s
             , toField $ showD <$> d
             , toField $ showD <$> r
             , toField $ showD <$> e
             ]

{-| Range of the integral -}
range :: (Double, Double)
range = (4, 8)

{-| Main procedure. This is an IO action that finds estimates, differences, ratios,
and extrapolations for values of n which are the first 6 powers of 2.
Then it writes all the estimates into a csv file.
-}
main :: IO ()
main = BL.writeFile file $ encode $ inf $ ratios $ diffs $ nToEstimate . (2^) <$> [1..6]
  where nToEstimate i = estimate func i range
        file = "results.csv"
#+END_SRC
